使用工具  vscode   (visual studio code) 
设置中文语言  
第一步：快捷键 Ctrl+shift+p  输入configure display language   将值改为"locale":"zh-CN"  
第二步：商店里下载安装chinese language pack

安装快捷键 （keymap）
 css peek  
 eclipse keymap
 sublime text keymap and setttings 

 浏览器(快速浏览)
 安装open in borwser

1、vue的安装，将vue.js  vue.main.js下载到本地，本地引用

2、使用npm需要安装node  git  才可以使用   (bower)
bower类似java后端的maven   bower官网 (https://bower.io/)

bower的全局安装：npm install -g bower

常用语句：
bower init         配置项目信息
bower info jquery  查看Jquery所有的版本
bower info list    查看已安装那些
bower install jquery  安装最新版本
bower install jquery#2.2.1  安装指定版本


指令使用了
v-for循环li的值
<ul>
    <li v-for="(book,index) in books">{{index+1}}:{{book.name}}</li>
</ul>


v-html  在网站上动态渲染任意 HTML 是非常危险的，容易导致攻击。只在可信内容上使用 v-html，永不用在用户提交的内容上。
v-pre  不显示表达式   

filters  过滤器 在表达式里的优化，胡子表达式支持filters
<div id="app">
    <ul>
        <li v-for="(good,index) in goods"><span>{{index+1}}-{{good.name}}</span>----------------<span>{{good.price|addPrfix("$")}}</span></li>
    </ul>
</div>

<script>
    var app = new Vue({
        el:"#app",
        data:{
            goods:[
                {name:"帽子",price:"12.58"},
                {name:"裤子",price:"180.58"},
                {name:"上衣",price:"80.58"},
                {name:"手套",price:"22.58"},
            ]
        },
        filters:{
            addPrfix:function(value,prfix){
                return (prfix || "￥")+value;
            }
        }
    });    
</script>


isShow:true 结合  v-if="isShow" 来决定内容的隐藏和显示

v-bind
v-bind的简写 <a :href="url" :title="title" target="_blank">{{content}}</a>

开发中指令和事件(methods:{})配合使用
v-on:click（还有其他的鼠标，键盘事件） 绑定点击事件
绑定           v-on  
定义事件是是在  methods:{}中
<button v-on:click="changeelement">改变它</button>
简写
<button @click="changeelement">改变它2</button>
<button @click="changeelement('这里是传的参数值',$event)">改变它2</button>
$even尽量往后面放，当然也根据项目需求来定


methods:{
    changeelement(name,age,e){
        // $event e
        //使的href上的Url地址不起作用  简写是 @click.prevent
        //e.preventDefault();
        this.text = name+age;
    }
}
<a :href="url" @click.prevent="changeelement('xiaoyu',23,$event)">改变它</a>

 //不再派发事件
 e.stopPropagation();

.once
.left
.right

stopPropagation     //不再派发事件  阻止上一个节点或者其它节点被调用  简写是@click.stop
 <div @click="pchange">
    <span>商品·1</span>
    <a href="javascript:void(0)" @click.stop="del($event)">删除元素</a>
</div>


.prevent preventDefault   //使的href上的Url地址不起作用  简写是@click.prevent


.capture   自外向里冒泡排序  本来是先执行del 加上capture后自外向里执行 pchange
 <div @click="pchange">
    <span>商品·1</span>
    <a href="javascript:void(0)" @click.stop="del($event)">删除元素</a>
</div>


//获取键码
fucntion key(e){
    console.log(e.keyCode()+"====="+e.which);
}
onkeydown="key(event)"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
《VUEJS自定义指令注册》
vuejs的自定义指令主要的目的是为了提升dom元素的重复处理和提高代码的复用率
    bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。
    inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。
    update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。
    componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。
    unbind：只调用一次，指令与元素解绑时调用。


钩子函数参数
指令钩子函数会被传入以下参数：
    el：指令所绑定的元素，可以用来直接操作 DOM 。
    binding：一个对象，包含以下属性：
        -name：指令名，不包括 v- 前缀。
        -value：指令的绑定值，例如：v-my-directive="1 + 1" 中，绑定值为 2。
        -oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
        -expression：字符串形式的指令表达式。例如 v-my-directive="1 + 1" 中，表达式为 "1 + 1"。
        -arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 "foo"。
        -modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。
    vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。
    oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。




自定义指令的两种方法
    vue.directive( id, [definition] )

    //全局指令：
    vue.directive( id, [definition] )

    //局部指令：
    var app = new Vue({
        el:"#app",
        data:{},
        methods:{},
        computed:{},
        filters:{},
        driectives:{
            focus: {
                // 指令的定义
                inserted: function (el) {
                    el.focus()
                }
            }
        }
    });

    //指令的调用： v-指令名称  比如上的v-foucs
    //指令是改变dom元素的一个行为(样式、事件等)


---------指令练习代码如下：
<div id="app">
    <div v-sam-directive="isShow" v-if="isShow">{{title}}</div>
    <button @click="clickme">点我</button>
</div>

<script>
    Vue.directive("sam-directive",{
        //只要在元素上应用了指令就会触发
        bind:function(el,binding,vnode){
            console.log("1======>bind");
            var s = JSON.stringify
            el.innerHTML =
                'name: '       + s(binding.name) + '<br>' +
                'value: '      + s(binding.value) + '<br>' +
                'expression: ' + s(binding.expression) + '<br>' +
                'argument: '   + s(binding.arg) + '<br>' +
                'modifiers: '  + s(binding.modifiers) + '<br>' +
                'vnode keys: ' + Object.keys(vnode).join(', ')
        },
        //当插入元素位置的时候就会触发
        inserted:function(el,binding,vnode){
            console.log("2======>inserted");
        },
        //当指令中的数据模型修改了的时候就会触发 总触发   vnode更新之后
        update:function(el,binding,vnode,oldnode){
            console.log("3======>update");
        },
        //一般不用，vnode更新之后
        componentUpdated:function(el,binding,vnode,oldnode){
            console.log("4======>componentUpdated");
        },
        //元素消失才会执行
        unbind:function(el,binding,vnode){
            console.log("5======>unbind");
        }
        });

        var app = new Vue({
        el:"#app",
        data:{
            title:"TestVue",
            isShow:true
        },
        methods:{
            clickme:function(){
                this.isShow = !this.isShow;
            }
        }          
    });
</script>


v-model相关参数：  lazy懒加载  number只能输入数据，不允许输入中文  trim去空

